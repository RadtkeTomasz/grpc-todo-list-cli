using System.Text;
using GrpcTodo.CLI.Enums;

namespace GrpcTodo.CLI.Lib;


public sealed class ConfigsManager
{
    public static string UserHomeFolder => Environment.GetFolderPath(Environment.SpecialFolder.UserProfile);
    public static string ConfigsFolderName => ".gl";
    public static string ConfigsFileName => "configs";
    private static string _dirPath = UserHomeFolder + "/" + ConfigsFolderName;
    private static string _configsFilePath = _dirPath + "/" + ConfigsFileName;

    private record Info(string Value, int LineIndex, int KeyIndex, string[] Lines);

    public ConfigsManager()
    {
        CreateConfigFilesIfNotExists();
    }

    private void CreateConfigFilesIfNotExists()
    {
        if (!Directory.Exists(_dirPath))
            Directory.CreateDirectory(_dirPath);

        if (!File.Exists(_configsFilePath))
        {
            using var file = File.CreateText(_configsFilePath);

            file.WriteLine("# please, do not edit this file manually");
            file.WriteLine("@alias logout=account logout");
            file.WriteLine("@alias login=account login");
            file.WriteLine("@alias signup=account create");

            file.Close();
        }
    }

    private (string value, ushort index) GetKey(ConfigKey prefix, string line)
    {
        line = line.Replace(prefix.Translate(), "").Trim();

        var key = "";
        ushort index = 0;
        var chr = line[index];

        while (chr != '=')
        {
            key += chr;
            chr = line[++index];
        }

        return (key, (ushort)(index + 1 + prefix.Translate().Length));
    }

    private string GetValue(string line, ushort startIndex)
    {
        return line[((byte)startIndex)..];
    }

    private string ReadFile(string filePath)
    {
        using var fs = new FileStream(filePath, FileMode.Open, FileAccess.Read);

        var bytes = new byte[fs.Length];

        fs.Read(bytes, 0, (int)fs.Length);

        fs.Close();

        return Encoding.UTF8.GetString(bytes);
    }

    private Info? GetDetailed(ConfigKey prefix, string key)
    {
        var text = ReadFile(_configsFilePath);

        string[] lines = text.Replace("\r\n", "\n").Split("\n");

        for (var i = 0; i < lines.Length; i++)
        {
            var line = lines[i];

            if (line.StartsWith(prefix.Translate()))
            {
                var lineKey = GetKey(prefix, line);

                Console.WriteLine(line);
                Console.WriteLine(lineKey);
                Console.WriteLine();

                if (lineKey.value == key)
                {
                    var value = GetValue(line, lineKey.index);

                    return new(value, lineKey.index, i, lines);
                }
            }
        }

        return null;
    }

    public string? GetItem(ConfigKey prefix, string key)
    {
        CreateConfigFilesIfNotExists();

        return GetDetailed(prefix, key)?.Value;
    }

    public List<(string key, string value)> ReadPrefixes(ConfigKey prefix)
    {
        CreateConfigFilesIfNotExists();

        var items = new List<(string, string)>();

        var text = ReadFile(_configsFilePath);

        string[] lines = text.Replace("\r\n", "\n").Split("\n");

        foreach (var line in lines)
        {
            if (line.StartsWith(prefix.Translate()))
            {
                var lineWithoutPrefix = line.Replace(prefix.Translate(), "").Trim();

                var keyValuePair = lineWithoutPrefix.Split("=");

                // prevent to try parse a wrong item
                if (keyValuePair.Length != 2)
                    continue;

                var key = keyValuePair[0].Trim();
                var value = keyValuePair[1].Trim();

                items.Add((key, value));
            }
        }

        return items;
    }

    public void RemoveItem(ConfigKey prefix, string key)
    {
        CreateConfigFilesIfNotExists();

        var keyOnFile = GetDetailed(prefix, key);

        Console.WriteLine(keyOnFile);

        if (keyOnFile is null)
            return;

        StringBuilder newFileContent = new();

        var (value, _, lineIndex, lines) = keyOnFile;

        for (int i = 0; i < lines.Length; i++)
        {
            if (i != lineIndex)
            {
                newFileContent.AppendLine(lines[i]);
            }
        }

        using var fs = new FileStream(_configsFilePath, FileMode.Create, FileAccess.Write);

        var bytes = Encoding.UTF8.GetBytes(newFileContent.ToString());

        fs.Write(bytes);

        fs.Close();
    }

    public void SetItem(ConfigKey prefix, string key, string value)
    {
        CreateConfigFilesIfNotExists();

        var keyOnFile = GetDetailed(prefix, key);

        StringBuilder newFileContent = new();

        if (keyOnFile is not null)
        {
            var (keyValue, keyIndex, lineIndex, lines) = keyOnFile;

            for (int i = 0; i < lines.Length; i++)
            {
                if (i != lineIndex)
                {
                    newFileContent.AppendLine(lines[i]);
                }
                else
                {
                    newFileContent.Append(lines[i].Replace(keyValue, value));
                }
            }
        }
        else
        {
            var currentFileContent = ReadFile(_configsFilePath);

            newFileContent.AppendLine(currentFileContent);
            newFileContent.AppendLine($"{prefix.Translate()}{key}={value}");
        }

        using var fs = new FileStream(_configsFilePath, FileMode.Create, FileAccess.Write);

        var bytes = Encoding.UTF8.GetBytes(newFileContent.ToString());

        fs.Write(bytes);

        fs.Close();
    }
}

public static class ConfigsManagerExtension
{
    public static string Translate(this ConfigKey configKey)
    {
        return configKey switch
        {
            ConfigKey.Alias => "@alias ",
            ConfigKey.Item => "@item ",
            _ => "@item "
        };
    }
}